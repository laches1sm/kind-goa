// Code generated by goa v3.0.6, DO NOT EDIT.
//
// service-parrot HTTP server
//
// Command:
// $ goa gen parrot_service/design

package server

import (
	"context"
	"net/http"
	serviceparrot "parrot_service/gen/service_parrot"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the service-parrot service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	Postparrot     http.Handler
	Listaparrot    http.Handler
	Listallparrots http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the service-parrot service endpoints.
func New(
	e *serviceparrot.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Postparrot", "POST", "/new-parrot"},
			{"Listaparrot", "GET", "/one-parrot"},
			{"Listallparrots", "GET", "/all-parrots"},
		},
		Postparrot:     NewPostparrotHandler(e.Postparrot, mux, dec, enc, eh),
		Listaparrot:    NewListaparrotHandler(e.Listaparrot, mux, dec, enc, eh),
		Listallparrots: NewListallparrotsHandler(e.Listallparrots, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "service-parrot" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Postparrot = m(s.Postparrot)
	s.Listaparrot = m(s.Listaparrot)
	s.Listallparrots = m(s.Listallparrots)
}

// Mount configures the mux to serve the service-parrot endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountPostparrotHandler(mux, h.Postparrot)
	MountListaparrotHandler(mux, h.Listaparrot)
	MountListallparrotsHandler(mux, h.Listallparrots)
}

// MountPostparrotHandler configures the mux to serve the "service-parrot"
// service "postparrot" endpoint.
func MountPostparrotHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/new-parrot", f)
}

// NewPostparrotHandler creates a HTTP handler which loads the HTTP request and
// calls the "service-parrot" service "postparrot" endpoint.
func NewPostparrotHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodePostparrotRequest(mux, dec)
		encodeResponse = EncodePostparrotResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "postparrot")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service-parrot")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountListaparrotHandler configures the mux to serve the "service-parrot"
// service "listaparrot" endpoint.
func MountListaparrotHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/one-parrot", f)
}

// NewListaparrotHandler creates a HTTP handler which loads the HTTP request
// and calls the "service-parrot" service "listaparrot" endpoint.
func NewListaparrotHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeListaparrotRequest(mux, dec)
		encodeResponse = EncodeListaparrotResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listaparrot")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service-parrot")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountListallparrotsHandler configures the mux to serve the "service-parrot"
// service "listallparrots" endpoint.
func MountListallparrotsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/all-parrots", f)
}

// NewListallparrotsHandler creates a HTTP handler which loads the HTTP request
// and calls the "service-parrot" service "listallparrots" endpoint.
func NewListallparrotsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeListallparrotsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listallparrots")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service-parrot")
		var err error

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
