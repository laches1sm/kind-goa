// Code generated by goa v3.0.6, DO NOT EDIT.
//
// service-parrot client HTTP transport
//
// Command:
// $ goa gen parrot_service/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the service-parrot service endpoint HTTP clients.
type Client struct {
	// Postparrot Doer is the HTTP client used to make requests to the postparrot
	// endpoint.
	PostparrotDoer goahttp.Doer

	// Listaparrot Doer is the HTTP client used to make requests to the listaparrot
	// endpoint.
	ListaparrotDoer goahttp.Doer

	// Listallparrots Doer is the HTTP client used to make requests to the
	// listallparrots endpoint.
	ListallparrotsDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the service-parrot service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		PostparrotDoer:      doer,
		ListaparrotDoer:     doer,
		ListallparrotsDoer:  doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Postparrot returns an endpoint that makes HTTP requests to the
// service-parrot service postparrot server.
func (c *Client) Postparrot() goa.Endpoint {
	var (
		decodeResponse = DecodePostparrotResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPostparrotRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PostparrotDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("service-parrot", "postparrot", err)
		}
		return decodeResponse(resp)
	}
}

// Listaparrot returns an endpoint that makes HTTP requests to the
// service-parrot service listaparrot server.
func (c *Client) Listaparrot() goa.Endpoint {
	var (
		encodeRequest  = EncodeListaparrotRequest(c.encoder)
		decodeResponse = DecodeListaparrotResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListaparrotRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListaparrotDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("service-parrot", "listaparrot", err)
		}
		return decodeResponse(resp)
	}
}

// Listallparrots returns an endpoint that makes HTTP requests to the
// service-parrot service listallparrots server.
func (c *Client) Listallparrots() goa.Endpoint {
	var (
		decodeResponse = DecodeListallparrotsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListallparrotsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListallparrotsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("service-parrot", "listallparrots", err)
		}
		return decodeResponse(resp)
	}
}
