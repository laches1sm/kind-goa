// Code generated by goa v3.0.6, DO NOT EDIT.
//
// service-parrot HTTP client CLI support package
//
// Command:
// $ goa gen parrot_service/design

package client

import (
	"encoding/json"
	"fmt"
	serviceparrot "parrot_service/gen/service_parrot"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildPostparrotPayload builds the payload for the service-parrot postparrot
// endpoint from CLI flags.
func BuildPostparrotPayload() (*serviceparrot.Parrotpayload, error) {
	payload := &serviceparrot.Parrotpayload{}
	return payload, nil
}

// BuildListaparrotPayload builds the payload for the service-parrot
// listaparrot endpoint from CLI flags.
func BuildListaparrotPayload(serviceParrotListaparrotBody string) (*serviceparrot.ListaparrotPayload, error) {
	var err error
	var body ListaparrotRequestBody
	{
		err = json.Unmarshal([]byte(serviceParrotListaparrotBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"id\": \"123\"\n   }'")
		}
		if utf8.RuneCountInString(body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &serviceparrot.ListaparrotPayload{
		ID: body.ID,
	}
	return v, nil
}
