// Code generated by goa v3.0.6, DO NOT EDIT.
//
// service-parrot HTTP client encoders and decoders
//
// Command:
// $ goa gen parrot_service/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	serviceparrot "parrot_service/gen/service_parrot"

	goahttp "goa.design/goa/v3/http"
)

// BuildPostparrotRequest instantiates a HTTP request object with method and
// path set to call the "service-parrot" service "postparrot" endpoint
func (c *Client) BuildPostparrotRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PostparrotServiceParrotPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("service-parrot", "postparrot", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodePostparrotResponse returns a decoder for responses returned by the
// service-parrot postparrot endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodePostparrotResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("service-parrot", "postparrot", resp.StatusCode, string(body))
		}
	}
}

// BuildListaparrotRequest instantiates a HTTP request object with method and
// path set to call the "service-parrot" service "listaparrot" endpoint
func (c *Client) BuildListaparrotRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListaparrotServiceParrotPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("service-parrot", "listaparrot", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListaparrotRequest returns an encoder for requests sent to the
// service-parrot listaparrot server.
func EncodeListaparrotRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*serviceparrot.ListaparrotPayload)
		if !ok {
			return goahttp.ErrInvalidType("service-parrot", "listaparrot", "*serviceparrot.ListaparrotPayload", v)
		}
		body := NewListaparrotRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("service-parrot", "listaparrot", err)
		}
		return nil
	}
}

// DecodeListaparrotResponse returns a decoder for responses returned by the
// service-parrot listaparrot endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListaparrotResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("service-parrot", "listaparrot", resp.StatusCode, string(body))
		}
	}
}

// BuildListallparrotsRequest instantiates a HTTP request object with method
// and path set to call the "service-parrot" service "listallparrots" endpoint
func (c *Client) BuildListallparrotsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListallparrotsServiceParrotPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("service-parrot", "listallparrots", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListallparrotsResponse returns a decoder for responses returned by the
// service-parrot listallparrots endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListallparrotsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("service-parrot", "listallparrots", resp.StatusCode, string(body))
		}
	}
}
