// Code generated by goa v3.0.6, DO NOT EDIT.
//
// service-parrot endpoints
//
// Command:
// $ goa gen parrot_service/design

package serviceparrot

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "service-parrot" service endpoints.
type Endpoints struct {
	Postparrot     goa.Endpoint
	Listaparrot    goa.Endpoint
	Listallparrots goa.Endpoint
}

// NewEndpoints wraps the methods of the "service-parrot" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Postparrot:     NewPostparrotEndpoint(s),
		Listaparrot:    NewListaparrotEndpoint(s),
		Listallparrots: NewListallparrotsEndpoint(s),
	}
}

// Use applies the given middleware to all the "service-parrot" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Postparrot = m(e.Postparrot)
	e.Listaparrot = m(e.Listaparrot)
	e.Listallparrots = m(e.Listallparrots)
}

// NewPostparrotEndpoint returns an endpoint function that calls the method
// "postparrot" of service "service-parrot".
func NewPostparrotEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Parrotpayload)
		return nil, s.Postparrot(ctx, p)
	}
}

// NewListaparrotEndpoint returns an endpoint function that calls the method
// "listaparrot" of service "service-parrot".
func NewListaparrotEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListaparrotPayload)
		return nil, s.Listaparrot(ctx, p)
	}
}

// NewListallparrotsEndpoint returns an endpoint function that calls the method
// "listallparrots" of service "service-parrot".
func NewListallparrotsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.Listallparrots(ctx)
	}
}
